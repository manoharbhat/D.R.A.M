<launch>

 <arg default="$(find dram_description)/urdf/dram.xacro" name="model"/>
  <arg default="true" name="gui"/>
  <arg default="$(find dram_description)/launch/default.rviz" name="rviz"/>
  <param command="$(find xacro)/xacro $(arg model)" name="robot_description"/>
  <param name="use_gui" value="$(arg gui)"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <node name="rviz" pkg="rviz" required="true" type="rviz"/>

<!-- <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="115200"/>
  </node> -->




<!-- Load controller configuration  -->
  <rosparam command="load" file="$(find dram_control)/config/control.yaml" />
  <rosparam command="load" file="$(find dram_control)/config/js_control.yaml" />
  <rosparam file="$(find dram_control)/config/joint_limits.yaml" command="load"/>

 <!-- <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
        args="joint_state_controller dram_velocity_controller"/> -->



    <node name="dram_velocity_controller_spawner"  pkg="controller_manager"  type="spawner"  output="screen"  args="/dram/dram_velocity_controller" ns="/"/>

    <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" 
          args="/dram/joint_state_controller" ns="/" />

   
    <remap from="/dram/dram_velocity_controller/cmd_vel" to="/cmd_vel"/>
  <remap from="/dram/dram_velocity_controller/odom" to="/odom"/> 

    <node name="dram_hardware_interface" pkg="dram_control" type="node" output="screen"/>
 <!--
 <remap from="/dram_velocity_controller/odom" to="/odometry/wheel"/>
<rosparam command="load" file="$(find dram_control)/config/localization.yaml"/>

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_local" respawn="true" >
        <remap from="odometry/filtered" to="odometry/local/filtered"/>
    </node>

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_global" respawn="true" >
        <remap from="odometry/filtered" to="odometry/global/filtered"/>
    </node> 
<node pkg="tf" type="static_transform_publisher" name="base_to_laser_broadcaster" args="0 0 0 0 0 0 odom base_link 100"/>
     -->



<node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
  <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
  <param name="frame_id"            type="string" value="lidar_link_1"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>
</launch>
